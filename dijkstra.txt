
const ll INF=1e18;
vector< vector<pair<int,int> > > adj(100000);


void dijkstra(int source,int node){


    vector<ll> dis(node+1,INF);
    vector<int> parents(node+1,0);


    priority_queue< pair<int,int> ,vector<pair<int,int> > , greater<pair<int,int> > > pq;
                                   // priority queue for max heap //
    pq.push({0,source});
    dis[source]=0;
    while (!pq.empty()){

        int parent=pq.top().second;
        pq.pop();
        vector< pair<int,int> > childrens=adj[parent];

        for(auto child:childrens){

            int child_vertex=child.first;
            int weight=child.second;

            if(  dis[parent]+weight < dis[child_vertex] ){


                dis[child_vertex]=dis[parent]+weight;
                pq.push({dis[child_vertex],child_vertex});
                parents[child_vertex]=(parent+1); //+1 for 0 indexing to 1 indexing


            }



        }


    }






        }